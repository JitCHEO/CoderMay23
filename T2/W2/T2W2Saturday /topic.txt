

# hackathons-api

## 03/08 lesson. SQL 

### ERD

In this Hackathon environment ERD, projects are created and can have multiple members assigned to them. Each member can only be associated with one project. Projects can also have a tech stack consisting of multiple technologies, and each technology can be used in multiple projects. This ERD helps students understand the relationships between projects, members, and technologies within a hackathon context.

![ERD](ERD.png)

- Connect to postgres.
- Create the database.
- Create the tables and insert the data.
- Simple queries.
- Delete and update.
- Create a script.

## 05/08 lesson. ORM

We will create a new database today. The purpose is still to store information about the Hackathon, but also start creating the API with Flask. Using an ORM (SQLAlchemy) we will be able to connect the app to a database and do all the db related tasks we already know from the app. In order to learn how to create the tables from scratch and to avoid conflicts with the previous database, we will create a new one.

- Create the project (venv, flask, and first run)
- Connect to a database (create, user, set the connection with flask)
- Create a project model and a table
- Seed tables command (repeating the table)
- Drop tables command (going to drop the table so it wont be repeating and adding the table)
- Schemas
- Get all projects
- ...
- Find a project by id
- Create a project
- Delete a project
- Update a project 

(app.py)
projects_schema = ProjectSchema(many=True) -list of projects
project_schema = ProjectSchema() - Just 1 project


delete method need the 'id'
-------------------------------
@app.delete('/projects/<int:id>')
def delete_project(id):
    stmt = db.select(Project).filter_by(id = id)
    project = db.session.scalar(stmt)

    if project:
        db.session.delete(project)
        db.session.commit()
        return {'message': f"Project {project.title} deleted successfully"}, 202
    else:
        return {'error': f"Project not found with id {id}"}, 404
---------------------------------
------------------Update database---------------------
# @app.put
@app.route('/projects/<int:id>', methods=["PUT", "PATCH"])
def update_project(id):
    stmt = db.select(Project).filter_by(id = id)
    project = db.session.scalar(stmt)

    if project:
        project_fields = project_schema.load(request.json)
  
        project.title = project_fields["title"] or project.title
        project.repository = project_fields["repository"] or project.repository 
        project.description = project_fields["description"] or project.description

        db.session.commit()
        return project_schema.dump(project), 202

    else:
        return {'error': f"Project not found with id {id}"}, 404


---------- Bottom way of UPDATE DATABSES is more recommended-----------------
# @app.put
@app.route('/projects/<int:id>', methods=["PUT", "PATCH"])
def update_project(id):
    stmt = db.select(Project).filter_by(id = id)
    project = db.session.scalar(stmt)

    if project:
        project.title = request.json.get("title") or project.title
        project.repository = request.json.get("repository") or project.repository 
        project.description = request.json.get("description") or project.description

        db.session.commit()
        return project_schema.dump(project), 202

    else:
        return {'error': f"Project not found with id {id}"}, 404



----------------------------------------